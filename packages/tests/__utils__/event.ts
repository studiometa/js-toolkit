export function createEvent<T extends keyof GlobalEventHandlersEventMap>(
  type: T,
  data?: Record<string, unknown>,
  options?,
): GlobalEventHandlersEventMap[T] {
  const globalEventHandlersEventMap = {
    abort: UIEvent,
    animationcancel: Event,
    animationend: Event,
    animationiteration: Event,
    animationstart: Event,
    auxclick: MouseEvent,
    beforeinput: InputEvent,
    blur: FocusEvent,
    cancel: Event,
    canplay: Event,
    canplaythrough: Event,
    change: Event,
    click: MouseEvent,
    close: Event,
    compositionend: CompositionEvent,
    compositionstart: CompositionEvent,
    compositionupdate: CompositionEvent,
    contextmenu: MouseEvent,
    copy: Event,
    cuechange: Event,
    cut: Event,
    dblclick: MouseEvent,
    drag: Event,
    dragend: Event,
    dragenter: Event,
    dragleave: Event,
    dragover: Event,
    dragstart: Event,
    drop: Event,
    durationchange: Event,
    emptied: Event,
    ended: Event,
    error: ErrorEvent,
    focus: FocusEvent,
    focusin: FocusEvent,
    focusout: FocusEvent,
    formdata: Event,
    gotpointercapture: Event,
    input: Event,
    invalid: Event,
    keydown: KeyboardEvent,
    keypress: KeyboardEvent,
    keyup: KeyboardEvent,
    load: Event,
    loadeddata: Event,
    loadedmetadata: Event,
    loadstart: Event,
    lostpointercapture: Event,
    mousedown: MouseEvent,
    mouseenter: MouseEvent,
    mouseleave: MouseEvent,
    mousemove: MouseEvent,
    mouseout: MouseEvent,
    mouseover: MouseEvent,
    mouseup: MouseEvent,
    paste: Event,
    pause: Event,
    play: Event,
    playing: Event,
    pointercancel: Event,
    pointerdown: Event,
    pointerenter: Event,
    pointerleave: Event,
    pointermove: Event,
    pointerout: Event,
    pointerover: Event,
    pointerup: Event,
    progress: ProgressEvent,
    ratechange: Event,
    reset: Event,
    resize: UIEvent,
    scroll: Event,
    scrollend: Event,
    securitypolicyviolation: Event,
    seeked: Event,
    seeking: Event,
    select: Event,
    selectionchange: Event,
    selectstart: Event,
    slotchange: Event,
    stalled: Event,
    submit: Event,
    suspend: Event,
    timeupdate: Event,
    toggle: Event,
    touchcancel: TouchEvent,
    touchend: TouchEvent,
    touchmove: TouchEvent,
    touchstart: TouchEvent,
    transitioncancel: Event,
    transitionend: Event,
    transitionrun: Event,
    transitionstart: Event,
    volumechange: Event,
    waiting: Event,
    webkitanimationend: Event,
    webkitanimationiteration: Event,
    webkitanimationstart: Event,
    webkittransitionend: Event,
    wheel: WheelEvent,
  };

  const Ctor = globalEventHandlersEventMap[type] ?? Event;
  const event = new Ctor(type, options);
  for (const [name, value] of Object.entries(data ?? {})) {
    Object.defineProperty(event, name, {
      configurable: true,
      value,
    });
  }

  return event as GlobalEventHandlersEventMap[T];
}
